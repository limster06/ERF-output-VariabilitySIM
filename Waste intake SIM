#Siming the energy stored per kg from different batches of waste

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gamma

# --- Parameters for the NCV distribution ---
mean_target = 11.0   # MJ/kg
std_target = 2.0     # MJ/kg
var_target = std_target**2

# Gamma distribution parameters
k = (mean_target**2) / var_target   # shape (α)
theta = var_target / mean_target    # scale (θ)
dist = gamma(a=k, scale=theta)

# --- Simulation settings ---
mass_per_sample = 10      # kg per waste sample
n_batches = 96000     # simulate one million batches for good stats

# --- Monte Carlo simulation for batch-level energies ---
ncv_samples = dist.rvs(size=n_batches)        # MJ/kg for each sample
batch_energy = ncv_samples * mass_per_sample  # MJ per 10 kg batch

# --- Results ---
print(f"Simulated {n_batches:,} batches of 10 kg each.")
print(f"Mean batch energy: {batch_energy.mean():.2f} MJ")
print(f"Std dev: {batch_energy.std():.2f} MJ")
print(f"95% interval: {np.percentile(batch_energy, 2.5):.2f} – {np.percentile(batch_energy, 97.5):.2f} MJ")

# --- Plot histogram of batch energies ---
plt.figure(figsize=(9,5))
plt.hist(batch_energy, bins=80, density=False, alpha=0.7, color="teal")
plt.axvline(batch_energy.mean(), color="red", linestyle="--", label=f"Mean ≈ {batch_energy.mean():.2f} MJ")
plt.title("Monte Carlo Simulation: Energy Stored in Each Batch (10 kg)")
plt.xlabel("Energy per Batch (MJ)")
plt.ylabel("Frequency")
plt.legend()
plt.grid(True)
plt.show()

#Using that sim to model energy/10kg for each hour

# --- Use existing imports and objects from your notebook ---
# Assumes you've already run:
# import numpy as np
# import matplotlib.pyplot as plt
# from scipy.stats import gamma
# ... set mean_target, std_target, k, theta, dist, mass_per_sample, samples_per_day ...

# --- Single-day draw using the SAME dist and parameters ---
# (Keep your existing values; just ensure we draw once for the day)
n_days = 1  # only one day so we can inspect the 24 × 4000-batch groups

#960000kg of waste each day and each sample is 10kg
samples_per_day=96000

# Draw NCV for each 10 kg batch (same dist as before)
ncv_samples = dist.rvs(size=samples_per_day)      # MJ/kg per batch
batch_energy_MJ = ncv_samples * mass_per_sample   # MJ per 10 kg batch

# --- Accumulate every 4000 batches (24 groups over the day) ---
group_size = 4000
assert samples_per_day % group_size == 0, "samples_per_day must be divisible by 4000"
grouped_energy_MJ = batch_energy_MJ.reshape(-1, group_size).sum(axis=1)  # shape (24,)
grouped_energy_MWh = grouped_energy_MJ / 3600.0

# --- Quick stats ---
print(f"Groups: {len(grouped_energy_MWh)} (each = {group_size} batches)")
print(f"Mean per group: {grouped_energy_MWh.mean():.2f} MWh")
print(f"Std per group: {grouped_energy_MWh.std():.2f} MWh")
print("Hourly (24 groups) MWh:", ", ".join(f"{x:.2f}" for x in grouped_energy_MWh))

# --- Histogram (frequency) of the 24 accumulated energies ---
plt.figure(figsize=(9,5))
plt.hist(grouped_energy_MWh, bins=12, density=False, edgecolor="black")
plt.axvline(grouped_energy_MWh.mean(), color="red", linestyle="--",
            label=f"Mean ≈ {grouped_energy_MWh.mean():.2f} MWh")
plt.title("Accumulated Energy per 4,000 Batches (One Day, 24 Groups)")
plt.xlabel("Energy per 4,000 Batches (MWh)")
plt.ylabel("Frequency")
plt.legend()
plt.grid(True)
plt.show()
